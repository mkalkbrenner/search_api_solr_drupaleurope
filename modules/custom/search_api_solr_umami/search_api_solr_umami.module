<?php

/**
 * Implements hook_search_api_solr_field_mapping_alter().
 */
function search_api_solr_umami_search_api_solr_field_mapping_alter(\Drupal\search_api\IndexInterface $index, array &$fields) {
  $single_values = [
    'average_voting',
  ];

  foreach ($single_values as $single_value) {
    if (isset($fields[$single_value])) {
      $parts = explode('_', $fields[$single_value]);
      // For example use a sds_* single value field instead of the sdm_* multi-valued one.
      $parts[0] = preg_replace('/(.+)m$/', '$1s', $parts[0]);
      $fields[$single_value] = implode('_', $parts);
    }
  }
}

/**
 * Implements hook_search_api_solr_finalize_index().
 *
 * @throws \Drupal\search_api\SearchApiException
 */
function search_api_solr_umami_search_api_solr_finalize_index(\Drupal\search_api\IndexInterface $index) {
  if ('recipes' == $index->id()) {
    $cu_options = [
      'commit.waitSearcher' => TRUE,
      'commit.softCommit' => TRUE,
    ];

    /** @var \Drupal\search_api_solr\Utility\StreamingExpressionQueryHelper $queryHelper */
    $queryHelper = \Drupal::service('search_api_solr.streaming_expression_query_helper');

    $query = $queryHelper->createQuery($index);
    $exp = $queryHelper->getStreamingExpressionBuilder($query);

    $streaming_expression =
      $exp->_commit_update(
        $exp->innerJoin(
          $exp->_search_all(
            'q=' . $exp->_field_escaped_value('search_api_datasource','entity:node'),
            'fq="' . $exp->_index_filter_query() . '"',
            'fl="' . $exp->_all_fields_list(',', TRUE, ['score', 'random', 'average_voting']) . '"',
            'sort="' . $exp->_field('nid') . ' asc"'
          ),
          $exp->select(
            $exp->rollup(
              $exp->_search_all(
                'q=' . $exp->_field_escaped_value('search_api_datasource','entity:vote'),
                'fq="' . $exp->_index_filter_query() . '"',
                'fl="' . $exp->_field_list([
                  'entity_id',
                  'value'
                ]) . '"',
                'sort="' . $exp->_field('entity_id') . ' asc"'
              ),
              'over="' . $exp->_field('entity_id') . '"',
              'avg(' . $exp->_field('value') . ')'
            ),
            $exp->_field('entity_id') . ' as ' . $exp->_field('nid'),
            'avg(' . $exp->_field('value') . ') as ' . $exp->_field('average_voting')
          ),
          'on=' . $exp->_field('nid')
        ),
        $cu_options
      );

    $queryHelper->setStreamingExpression($query, $streaming_expression);

    $index->getServerInstance()
      ->getBackend()
      ->executeStreamingExpression($query);
  }
}

function search_api_solr_umami_search_api_solr_query_alter(Solarium\QueryType\Select\Query\Query $solarium_query, Drupal\search_api\Query\Query $query) {
  if ($query->hasTag('views_recipe_solr_search')) {

    /** @var \Drupal\search_api_solr\Utility\StreamingExpressionQueryHelper $queryHelper */
    $queryHelper = \Drupal::service('search_api_solr.streaming_expression_query_helper');
    $exp = $queryHelper->getStreamingExpressionBuilder($query);

    $nid_field = $exp->_field('nid');
    $entity_id_field = $exp->_field('entity_id');

    if ($query->hasTag('facet:user_voting')) {
      $solarium_query->addFilterQuery([
        'key' => 'user_filter',
        'query' => '{!join from=' . $entity_id_field . ' to=' . $nid_field . '}' .
          $exp->_field_value('user_id', \Drupal::currentUser()->id()),
      ]);
    }

    if (isset($_GET['sort_order']) && 'ASC' == $_GET['sort_order']) {
      $solarium_query->addParam('rq', '{!ltr model=umamiModel reRankDocs=100}');
    }
  }
}

function search_api_solr_umami_search_api_query_alter(\Drupal\search_api\Query\QueryInterface &$query) {
  if ($query->hasTag('views_recipe_recommendations')) {
    $uid = \Drupal::currentUser()->id();
    $min_voting = 4;

    /** @var \Drupal\search_api_solr\Utility\StreamingExpressionQueryHelper $queryHelper */
    $queryHelper = \Drupal::service('search_api_solr.streaming_expression_query_helper');

    $exp = $queryHelper->getStreamingExpressionBuilder($query);

    // Use uuids instead of ids because the cycle detection just uses values.
    // Otherwise vote 7, recipe 7 and user 7 will all be the same from cycle
    // detection's perspective.
    $streaming_expression =
      $exp->innerJoin(
        $exp->sort(
          $exp->nodes($exp->_collection(),
            $exp->nodes($exp->_collection(),
              $exp->nodes($exp->_collection(),
                $exp->nodes($exp->_collection(),
                  $exp->_search_all(
                    'q="' . $exp->_field_escaped_value('search_api_datasource','entity:vote') . '"',
                    'fq="' . $exp->_index_filter_query() .
                    ' +' . $exp->_field_value('user_id', $uid) .
                    ' +' . $exp->_field('value') . ':[' . $min_voting . ' TO 5]"',
                    'fl="' . $exp->_field_list(['search_api_datasource', 'user_id', 'entity_uuid']) . '"',
                    'sort="' . $exp->_field('entity_uuid') . ' asc"'
                  ),
                  // current user votes -> recipes
                  'walk="' . $exp->_field('entity_uuid') . '->' . $exp->_field('uuid') . '"',
                  'gather="' . $exp->_field('nid') . '"'
                ),
                // recipes -> all users voted per recipe
                'walk="node->' . $exp->_field('entity_id') . '"',
                'fq="' . $exp->_field('value') . ':[' . $min_voting . ' TO 5]' . '"',
                // Cycle detection avoids votes by current user we came from.
                'gather="' . $exp->_field('user_uuid') . '"'
              ),
              // all users voted => all recipes voted
              'walk="node->' . $exp->_field('user_uuid') . '"',
              'fq="' . $exp->_field('value') . ':[' . $min_voting . ' TO 5]' . '"',
              'gather="' . $exp->_field('entity_uuid') . '"'
            ),
            'walk="node->' . $exp->_field('uuid') . '"',
            'fq="-' . $exp->_field_value('uid', $uid) . '"',
            // Cycle detection avoids the recipes the current user voted on himself above $min_voting.
            'gather="' . $exp->_field('nid') . '"'
          ),
          'by="node asc"'
        ),
        $exp->_search_all(
          'q=' . $exp->_field_escaped_value('search_api_datasource','entity:node'),
          'fq="' . $exp->_index_filter_query() . '"',
          'fl="' . $exp->_all_fields_list(',', FALSE) . '"',
          'sort="' . $exp->_field('nid') . ' asc"'
        ),
        'on="node=' . $exp->_field('nid') . '"'
      );

    $queryHelper->setStreamingExpression($query, $streaming_expression);
  }
  else {
    foreach ($query->getConditionGroup()->getConditions() as $nested_condition_group) {
      if ($nested_condition_group instanceof \Drupal\search_api\Query\ConditionGroupInterface) {
        if ($nested_condition_group->hasTag('facet:user_voting')) {
          $query->addTag('facet:user_voting');
        }
      }
    }
  }
}

function search_api_solr_umami_form_search_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['#action'] = '/' . \Drupal\Core\Url::fromRoute('view.recipe_solr_search.page_1')->getInternalPath();
}
